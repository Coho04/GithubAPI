package de.coho04.githubapi.entities;

import de.coho04.githubapi.Github;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;

class GHVulnerabilityTest {

    private JSONObject jsonObject;
    private Github github;

    @BeforeEach
    void setUp() {
        github = mock(Github.class);
        jsonObject = new JSONObject();
        jsonObject.put("package", new JSONObject().put("name", "Package1"));
        jsonObject.put("first_patched_version", "1.0.1");
        jsonObject.put("vulnerable_version_range", "<1.0.1");
        jsonObject.put("vulnerable_functions", new JSONArray(List.of("function1", "function2")));
    }

    @Test
    void shouldReturnCorrectPackage() {
        assertEquals("Package1", new GHVulnerability(github, jsonObject).getGhPackage().getName());
    }

    @Test
    void shouldReturnNullWhenPackageIsNotPresent() {
        jsonObject.remove("package");
        assertNull(new GHVulnerability(github, jsonObject).getGhPackage());
    }

    @Test
    void shouldReturnCorrectFirstPatchedVersion() {
        assertEquals("1.0.1", new GHVulnerability(github, jsonObject).getFirstPatchedVersion());
    }

    @Test
    void shouldReturnNullWhenFirstPatchedVersionIsNotPresent() {
        jsonObject.remove("first_patched_version");
        assertNull(new GHVulnerability(github, jsonObject).getFirstPatchedVersion());
    }

    @Test
    void shouldReturnCorrectVulnerableVersionRange() {
        assertEquals("<1.0.1", new GHVulnerability(github, jsonObject).getVulnerableVersionRange());
    }

    @Test
    void shouldReturnNullWhenVulnerableVersionRangeIsNotPresent() {
        jsonObject.remove("vulnerable_version_range");
        assertNull(new GHVulnerability(github, jsonObject).getVulnerableVersionRange());
    }

    @Test
    void shouldReturnCorrectVulnerableFunctions() {
        assertEquals(List.of("function1", "function2"), new GHVulnerability(github, jsonObject).getVulnerableFunctions());
    }

    @Test
    void shouldReturnEmptyArrayWhenVulnerableFunctionsAreNotPresent() {
        jsonObject.remove("vulnerable_functions");
        assertEquals(new ArrayList<String>(), new GHVulnerability(github, jsonObject).getVulnerableFunctions());
    }
}